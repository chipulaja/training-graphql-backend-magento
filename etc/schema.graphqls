type Query {
    getTrainerById(id: Int!): TrainerOutput @resolver(class: "\\Icube\\TrainingApiGraphql\\Model\\Resolver\\GetTrainerById") @doc(description: "The getTrainerById query returns information about a trainer")
    searchTrainer(
        search: String @doc(description: "search by trainer name."),
        filter: TrainerFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: TrainerSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
    ): TrainersOutput @resolver(class: "\\Icube\\TrainingApiGraphql\\Model\\Resolver\\SearchTrainer") @doc(description: "The searchTrainer query returns information about a trainer")
}

type Mutation {
    addTrainer(input: AddTrainerInput!): TrainerOutput @resolver(class: "\\Icube\\TrainingApiGraphql\\Model\\Resolver\\AddTrainer") @doc(description:"add trainer")
    deleteTrainerById(id: Int!): TrainerOutput @resolver(class: "\\Icube\\TrainingApiGraphql\\Model\\Resolver\\DeleteTrainerById") @doc(description:"delete trainer by id")
}

input AddTrainerInput {
    name: String @doc(description: "The name of the trainer")
    divisi: String @doc(description: "The divisi of the trainer")
}

type TrainerOutput {
    id: Int @doc(description: "The id of the trainer")
    name: String @doc(description: "The name of the trainer")
    divisi: String @doc(description: "The divisi of the trainer")
}

type TrainersOutput {
    items: [TrainerOutput] @doc(description: "An array of trainer that match the specified search criteria.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    total_count: Int @doc(description: "The number of products returned.")
}

input TrainerFilterInput {
    id: FilterTypeInput @doc(description: "The trainer id.")
    name: FilterTypeInput @doc(description: "The trainer name.")
    divisi: FilterTypeInput @doc(description: "The trainer name.")
}

input TrainerSortInput {
    id: SortEnum @doc(description: "Sort by the search id.")
    name: SortEnum @doc(description: "Sort by the search name.")
    divisi: SortEnum @doc(description: "Sort by the search divisi.")
}
